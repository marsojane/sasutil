export function format(...args: any[]): string {
	let msg, params
	(typeof arguments[0] === 'object') ? (msg = arguments[0][0], params = arguments[0]) : (msg = arguments[0], params = arguments)
	msg = msg.replace(/{\d}/g, (s) => {
		const key = (1 * s.match(/\d/)[0]) + 1
		return typeof params[key] !== 'undefined' ? params[key] : s
	})
	return msg
}

export const inArray = (needle: any, haystack: any[]): boolean => !!haystack.find((hay) => hay === needle)

export function exportLogs(linkRef, msgStack): void {
	if (msgStack.length > 0) {
		const fileName = format('sasutillogs{0}', (new Date).getTime())
		const url = URL.createObjectURL(new Blob([JSON.stringify(msgStack)], { type: 'text/plain;charset=utf-8;' }))
		linkRef.setAttribute('href', url)
		linkRef.setAttribute('download', fileName)
		linkRef.click()
	}
}

import * as moment from 'moment'
// pass the date format generated by moment js
// we use this method to strip the time and retain the date in the date value
// in order to provide an absolute date value to elastic regardless of the TZ
// the user should keep in mind that the value they put is in EST/EDT (TZ in the elastic search)
// @param: end => set the time to second before midnight. used for end date
export function unAwareToTime(ts: any, end?: boolean): any {
	const timePart = end ? { h: 23, m: 59, s: 59 } : { h: 0, m: 0, s: 0 }
	return moment([ts.year(), ts.month(), ts.date(), timePart.h, timePart.m, timePart.s]).format('x')
}
